.chapter(data-title='Anonymous Communication')
  .step(data-file='config/routes.rb')
    :markdown
      ## What does this thing do?

      ![Airtng](//howtodocs.s3.amazonaws.com/airtng-screen.png)

      This [Ruby on Rails](http://rubyonrails.org/) sample application is
      modeled after the amazing rental experience created by
      [AirBnB](https://www.airbnb.com), but with more 
      [Klingons](https://en.wikipedia.org/wiki/Klingon). 

      Host users can offer rental properties which other guest users can reserve. 
      The guest and the host can then anonymously communicate via a disposable Twilio phone number created 
      just for a reservation. In this tutorial, we'll show you the key bits of
      code to make this work. To run this sample app yourself, 
      [follow the instructions on GitHub](https://github.com/TwilioDevEd/anonymous-communications-rails).

      Let's get started! Click the right arrow above to move to the next step
      of the tutorial.

      ---

      **See Also:**
      * [AirTNG App Part One: Workflow Automation](https://www.twilio.com/docs/howto/walkthrough/workflow-automation/ruby/rails#0)
      * [Getting Started with Ruby on Rails](http://guides.rubyonrails.org/getting_started.html)
      * [Getting started with the Twilio Ruby gem](//twilio-ruby.readthedocs.org/en/latest/index.html#getting-started)

  .step(data-file='app/controllers/reservations_controller.rb', data-highlight='16-27, 102-109')
    :markdown
      ## Create a reservation

      The first step in connecting a guest and host is creating a reservation.
      Here, we handle a form submission for a new reservation which contains the
      guest's name and phone number.

      ---

      **See Also:**
      * [Creating ActiveRecord associations](http://guides.rubyonrails.org/association_basics.html#the-has-many-association)
      * [Rails controllers](http://guides.rubyonrails.org/action_controller_overview.html)

  .step(data-file='app/models/reservation.rb', data-highlight='33-36')
    :markdown
      ## Confirm the reservation

      Before the reservation is finalized, the host needs to confirm that the property
      is still available. Learn how to automate this process in [our first AirTNG
      tutorial, Workflow Automation](https://www.twilio.com/docs/howto/walkthrough/workflow-automation/ruby/rails).

      Once the reservation is confirmed, we need to create a Twilio number that
      the guest and host can use to communicate in the `provision_phone_number` method.

  .step(data-file='app/models/reservation.rb', data-highlight='61-85')
    :markdown
      ## Create a phone number for the guest and host to use

      Here we use a [Twilio REST API Client](//twilio-ruby.readthedocs.org/en/latest/index.html#getting-started)
      to search for and buy a new phone number to associate with the reservation.
      When we buy the number, we designate a [Twilio application](https://www.twilio.com/docs/api/rest/applications)
      that will handle [webhook](https://en.wikipedia.org/wiki/Webhook) requests
      when the new number receives an incoming call or text.

      We then save the new phone number on our `Reservation` model, so when our app
      receives calls or texts to this number, we'll know which reservation the call or
      text belongs to.

      ---

      **See Also:**
      * [Searching for Available Numbers](//www.twilio.com/docs/api/rest/available-phone-numbers)
      * [Purchase a Phone Number with the REST API](//www.twilio.com/docs/api/rest/incoming-phone-numbers#list-post)
      * [Create an Application in your account portal](//www.twilio.com/user/account/apps)

  .step(data-file='/app/controllers/reservations_controller.rb', data-highlight='70-85')
    :markdown
      ## Connecting guest and host via phone call

      Our [Twilio application](https://www.twilio.com/docs/api/rest/applications)
      should be configured to [send HTTP requests](https://www.twilio.com/docs/api/twiml/twilio_request) 
      to this controller method. Our app responds with [TwiML instructions](https://www.twilio.com/docs/api/twiml)
      that tell Twilio to `&lt;Play&gt;` an introductory MP3 audio file and then
      `&lt;Dial&gt;` either the guest or host, depending on who initiated the call.

      ---

      **See Also:**
      * [TwiML Dial verb](https://www.twilio.com/docs/api/twiml/dial)
      * [TwiML Play verb](https://www.twilio.com/docs/api/twiml/dial)

  .step(data-file='/app/controllers/reservations_controller.rb', data-highlight='54-68')
    :markdown
      ## Connecting guest and host via SMS

      When our host or guest send a message to the reservation's phone number,
      this controller will check to see if the incoming number is the host or guest. Than
      it will ask the reservation to send the message to the appropriate
      party. Next let's look at the the method that actually sends the message.

  .step(data-file='app/models/user.rb', data-highlight='15-22')
    :markdown
      ## Sending a text message

      Here we have a method on the `User` model that will send a message to
      that user instance. These are the three parameters needed to [send an
      SMS](https://www.twilio.com/docs/quickstart/ruby/sms/sending-via-rest)
      using the [Twilio REST API](https://www.twilio.com/docs/api/rest):
      `:from`, `:to`, and `:body`.

      ---

      **See Also:**
      * [REST API Docs for Message resource](https://www.twilio.com/docs/api/rest/message)
      * [Your message logs in the account portal](https://www.twilio.com/user/account/log/messages)

  .step
    :markdown
      ## Where to next?

      That's it! We've just implemented anonymous communications that allow your customers to connect while protecting their privacy. If you're a Ruby developer working with Twilio, you might want to check out these other tutorials.

      [**Part 1 of this Tutorial: Workflow Automation**](//www.twilio.com/docs/howto/walkthrough/workflow-automation/ruby/rails#0)

      Increase your rate of response by automating the workflows that are key to your business.

      [**Appointment Reminders**](https://www.twilio.com/docs/howto/walkthrough/appointment-reminders/ruby/rails)

      Send your customers a text message when they have an upcoming appointment - 
      this tutorial shows you how to do it from a background job.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share 
      with us, we'd love to hear it. Tweet [@twilio](http://twitter.com/twilio) 
      to let us know what you think.

